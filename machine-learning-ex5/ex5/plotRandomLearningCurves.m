function plotRandomLearningCurves(X, y)m = length(y);% set number of iterationsk = 100;lambda = 3;error_train = zeros(k, 1);error_val = zeros(k, 1);% X -> 12% Xval  -> 21% Xtest -> 21% Set relation of number of elements of X : Xval : XtestrelDis = [ 3/14 7/18 7/18 ];mXtrain = round(relDis(1) * m);mXval = round(relDis(2) * m);mXtest = round(relDis(3) * m);for i=1:k  % Create randomized sets  random = randperm(m);  % Create randomized training set  for j=1:mXtrain    Xtrain(j,1) = X(random(j));    ytrain(j,1) = y(random(j));  end  % Create randomized cross validation set    for j=1:mXval    Xval(j,1) = X(random(mXtrain + j));    yval(j,1) = y(random(mXtrain + j));  end    % Create randomized test set  for j=1:mXtest    Xtest(j,1) = X(random(mXtrain + mXval + j));    ytest(j,1) = y(random(mXtrain + mXval + j));  end      p = 8;  % Map X onto Polynomial Features and Normalize  X_poly_train = polyFeatures(Xtrain, p);  [X_poly_train, mu, sigma] = featureNormalize(X_poly_train);  % Normalize  X_poly_train = [ones(mXtrain, 1), X_poly_train];                   % Add Ones  % Map X_poly_val and normalize (using mu and sigma)  X_poly_val = polyFeatures(Xval, p);  X_poly_val = bsxfun(@minus, X_poly_val, mu);  X_poly_val = bsxfun(@rdivide, X_poly_val, sigma);  X_poly_val = [ones(size(X_poly_val, 1), 1), X_poly_val];           % Add Ones    % Map X_poly_test and normalize (using mu and sigma)  X_poly_test = polyFeatures(Xtest, p);  X_poly_test = bsxfun(@minus, X_poly_test, mu);  X_poly_test = bsxfun(@rdivide, X_poly_test, sigma);  X_poly_test = [ones(size(X_poly_test, 1), 1), X_poly_test];         % Add Ones    % Train model against test set and acquire theta  theta = trainLinearReg(X_poly_train, ytrain, lambda);    % Calculate test error (using cost function with lambda = 0)  error_train(i) = linearRegCostFunction(X_poly_train, ytrain, theta, 0);  error_val(i) = linearRegCostFunction(X_poly_val, yval, theta, 0);    enderror_train;error_val;err_train_avg = sum(error_train) / kerr_val_avg = sum(error_val) / kend